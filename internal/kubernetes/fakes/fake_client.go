// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/numaproj-labs/numaplane/internal/kubernetes"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type FakeClient struct {
	ApplyResourceStub        func([]byte, string) error
	applyResourceMutex       sync.RWMutex
	applyResourceArgsForCall []struct {
		arg1 []byte
		arg2 string
	}
	applyResourceReturns struct {
		result1 error
	}
	applyResourceReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteResourceStub        func(string, string, string, v1.DeleteOptions) error
	deleteResourceMutex       sync.RWMutex
	deleteResourceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 v1.DeleteOptions
	}
	deleteResourceReturns struct {
		result1 error
	}
	deleteResourceReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(context.Context, types.NamespacedName, client.Object, ...client.GetOption) error
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 types.NamespacedName
		arg3 client.Object
		arg4 []client.GetOption
	}
	getReturns struct {
		result1 error
	}
	getReturnsOnCall map[int]struct {
		result1 error
	}
	StatusUpdateStub        func(context.Context, client.Object, ...client.SubResourceUpdateOption) error
	statusUpdateMutex       sync.RWMutex
	statusUpdateArgsForCall []struct {
		arg1 context.Context
		arg2 client.Object
		arg3 []client.SubResourceUpdateOption
	}
	statusUpdateReturns struct {
		result1 error
	}
	statusUpdateReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(context.Context, client.Object, ...client.UpdateOption) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 client.Object
		arg3 []client.UpdateOption
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) ApplyResource(arg1 []byte, arg2 string) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.applyResourceMutex.Lock()
	ret, specificReturn := fake.applyResourceReturnsOnCall[len(fake.applyResourceArgsForCall)]
	fake.applyResourceArgsForCall = append(fake.applyResourceArgsForCall, struct {
		arg1 []byte
		arg2 string
	}{arg1Copy, arg2})
	stub := fake.ApplyResourceStub
	fakeReturns := fake.applyResourceReturns
	fake.recordInvocation("ApplyResource", []interface{}{arg1Copy, arg2})
	fake.applyResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) ApplyResourceCallCount() int {
	fake.applyResourceMutex.RLock()
	defer fake.applyResourceMutex.RUnlock()
	return len(fake.applyResourceArgsForCall)
}

func (fake *FakeClient) ApplyResourceCalls(stub func([]byte, string) error) {
	fake.applyResourceMutex.Lock()
	defer fake.applyResourceMutex.Unlock()
	fake.ApplyResourceStub = stub
}

func (fake *FakeClient) ApplyResourceArgsForCall(i int) ([]byte, string) {
	fake.applyResourceMutex.RLock()
	defer fake.applyResourceMutex.RUnlock()
	argsForCall := fake.applyResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) ApplyResourceReturns(result1 error) {
	fake.applyResourceMutex.Lock()
	defer fake.applyResourceMutex.Unlock()
	fake.ApplyResourceStub = nil
	fake.applyResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) ApplyResourceReturnsOnCall(i int, result1 error) {
	fake.applyResourceMutex.Lock()
	defer fake.applyResourceMutex.Unlock()
	fake.ApplyResourceStub = nil
	if fake.applyResourceReturnsOnCall == nil {
		fake.applyResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteResource(arg1 string, arg2 string, arg3 string, arg4 v1.DeleteOptions) error {
	fake.deleteResourceMutex.Lock()
	ret, specificReturn := fake.deleteResourceReturnsOnCall[len(fake.deleteResourceArgsForCall)]
	fake.deleteResourceArgsForCall = append(fake.deleteResourceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 v1.DeleteOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.DeleteResourceStub
	fakeReturns := fake.deleteResourceReturns
	fake.recordInvocation("DeleteResource", []interface{}{arg1, arg2, arg3, arg4})
	fake.deleteResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteResourceCallCount() int {
	fake.deleteResourceMutex.RLock()
	defer fake.deleteResourceMutex.RUnlock()
	return len(fake.deleteResourceArgsForCall)
}

func (fake *FakeClient) DeleteResourceCalls(stub func(string, string, string, v1.DeleteOptions) error) {
	fake.deleteResourceMutex.Lock()
	defer fake.deleteResourceMutex.Unlock()
	fake.DeleteResourceStub = stub
}

func (fake *FakeClient) DeleteResourceArgsForCall(i int) (string, string, string, v1.DeleteOptions) {
	fake.deleteResourceMutex.RLock()
	defer fake.deleteResourceMutex.RUnlock()
	argsForCall := fake.deleteResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeClient) DeleteResourceReturns(result1 error) {
	fake.deleteResourceMutex.Lock()
	defer fake.deleteResourceMutex.Unlock()
	fake.DeleteResourceStub = nil
	fake.deleteResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteResourceReturnsOnCall(i int, result1 error) {
	fake.deleteResourceMutex.Lock()
	defer fake.deleteResourceMutex.Unlock()
	fake.DeleteResourceStub = nil
	if fake.deleteResourceReturnsOnCall == nil {
		fake.deleteResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Get(arg1 context.Context, arg2 types.NamespacedName, arg3 client.Object, arg4 ...client.GetOption) error {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 types.NamespacedName
		arg3 client.Object
		arg4 []client.GetOption
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3, arg4})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeClient) GetCalls(stub func(context.Context, types.NamespacedName, client.Object, ...client.GetOption) error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeClient) GetArgsForCall(i int) (context.Context, types.NamespacedName, client.Object, []client.GetOption) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeClient) GetReturns(result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetReturnsOnCall(i int, result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) StatusUpdate(arg1 context.Context, arg2 client.Object, arg3 ...client.SubResourceUpdateOption) error {
	fake.statusUpdateMutex.Lock()
	ret, specificReturn := fake.statusUpdateReturnsOnCall[len(fake.statusUpdateArgsForCall)]
	fake.statusUpdateArgsForCall = append(fake.statusUpdateArgsForCall, struct {
		arg1 context.Context
		arg2 client.Object
		arg3 []client.SubResourceUpdateOption
	}{arg1, arg2, arg3})
	stub := fake.StatusUpdateStub
	fakeReturns := fake.statusUpdateReturns
	fake.recordInvocation("StatusUpdate", []interface{}{arg1, arg2, arg3})
	fake.statusUpdateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) StatusUpdateCallCount() int {
	fake.statusUpdateMutex.RLock()
	defer fake.statusUpdateMutex.RUnlock()
	return len(fake.statusUpdateArgsForCall)
}

func (fake *FakeClient) StatusUpdateCalls(stub func(context.Context, client.Object, ...client.SubResourceUpdateOption) error) {
	fake.statusUpdateMutex.Lock()
	defer fake.statusUpdateMutex.Unlock()
	fake.StatusUpdateStub = stub
}

func (fake *FakeClient) StatusUpdateArgsForCall(i int) (context.Context, client.Object, []client.SubResourceUpdateOption) {
	fake.statusUpdateMutex.RLock()
	defer fake.statusUpdateMutex.RUnlock()
	argsForCall := fake.statusUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) StatusUpdateReturns(result1 error) {
	fake.statusUpdateMutex.Lock()
	defer fake.statusUpdateMutex.Unlock()
	fake.StatusUpdateStub = nil
	fake.statusUpdateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) StatusUpdateReturnsOnCall(i int, result1 error) {
	fake.statusUpdateMutex.Lock()
	defer fake.statusUpdateMutex.Unlock()
	fake.StatusUpdateStub = nil
	if fake.statusUpdateReturnsOnCall == nil {
		fake.statusUpdateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.statusUpdateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Update(arg1 context.Context, arg2 client.Object, arg3 ...client.UpdateOption) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 client.Object
		arg3 []client.UpdateOption
	}{arg1, arg2, arg3})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeClient) UpdateCalls(stub func(context.Context, client.Object, ...client.UpdateOption) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeClient) UpdateArgsForCall(i int) (context.Context, client.Object, []client.UpdateOption) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyResourceMutex.RLock()
	defer fake.applyResourceMutex.RUnlock()
	fake.deleteResourceMutex.RLock()
	defer fake.deleteResourceMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.statusUpdateMutex.RLock()
	defer fake.statusUpdateMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kubernetes.Client = new(FakeClient)
