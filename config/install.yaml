apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: gitsyncs.numaplane.numaproj.io
spec:
  group: numaplane.numaproj.io
  names:
    kind: GitSync
    listKind: GitSyncList
    plural: gitsyncs
    singular: gitsync
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GitSync is the Schema for the gitsyncs API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: GitSyncSpec defines the desired state of GitSync
            properties:
              destination:
                description: Destination describes which cluster/namespace to sync
                  it
                properties:
                  cluster:
                    type: string
                  namespace:
                    description: 'Namespace is optional, as the Resources may be on
                      the cluster level (Note that some Resources describe their namespace
                      within their spec: for those that don''t it''s useful to have
                      it here)'
                    type: string
                required:
                - cluster
                type: object
              helm:
                description: Helm holds helm specific options
                properties:
                  parameters:
                    description: Parameters is a list of Helm parameters which are
                      passed to the helm template command upon manifest generation
                    items:
                      description: HelmParameter is a parameter passed to helm template
                        during manifest generation
                      properties:
                        name:
                          description: Name is the name of the Helm parameter
                          type: string
                        value:
                          description: Value is the value for the Helm parameter
                          type: string
                      type: object
                    type: array
                  valueFiles:
                    description: ValuesFiles is a list of Helm value files to use
                      when generating a template
                    items:
                      type: string
                    type: array
                type: object
              kustomize:
                description: Kustomize holds kustomize specific options
                type: object
              path:
                description: Path is the full path from the root of the repository
                  to where the resources are held If the Path is empty, then the root
                  directory will be used. Can be a file or a directory Note that all
                  resources within this path (described by .yaml files) will be synced
                type: string
              raw:
                description: Raw holds path or directory-specific options
                type: object
              repoUrl:
                description: RepoUrl is the URL to the repository itself
                type: string
              targetRevision:
                description: TargetRevision specifies the target revision to sync
                  to, it can be a branch, a tag, or a commit hash.
                type: string
            required:
            - destination
            - path
            - repoUrl
            - targetRevision
            type: object
          status:
            description: GitSyncStatus defines the observed state of GitSync
            properties:
              commitStatus:
                description: Last commit processed and the status
                properties:
                  error:
                    description: Error indicates an error that occurred upon attempting
                      sync, if any
                    type: string
                  hash:
                    description: Hash of the git commit
                    type: string
                  syncTime:
                    description: SyncTime represents the last time that we attempted
                      to sync this commit (regardless of whether it succeeded)
                    format: date-time
                    type: string
                  synced:
                    description: Synced indicates if the sync went through
                    type: boolean
                required:
                - hash
                - syncTime
                - synced
                type: object
              conditions:
                description: Conditions are the latest available observations of a
                  resource's current state.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              message:
                description: Message is added if there's a failure
                type: string
              phase:
                description: 'Important: Run "make" to regenerate code after modifying
                  this file'
                enum:
                - ""
                - Pending
                - Running
                - Failed
                - NotApplicable
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: numaplane
  name: numaplane-sa
  namespace: numaplane-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: numaplane
  name: numaplane-leader-election-role
  namespace: numaplane-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: numaplane
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: numaplane-aggregate-to-admin
rules:
- apiGroups:
  - numaplane.numaproj.io
  resources:
  - gitsyncs
  - gitsyncs/finalizer
  - gitsyncs/status
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: numaplane
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: numaplane-aggregate-to-edit
rules:
- apiGroups:
  - numaplane.numaproj.io
  resources:
  - gitsyncs
  - gitsyncs/finalizer
  - gitsyncs/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: numaplane
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: numaplane-aggregate-to-view
rules:
- apiGroups:
  - numaplane.numaproj.io
  resources:
  - gitsyncs
  - gitsyncs/finalizer
  - gitsyncs/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: numaplane-role
rules:
- apiGroups:
  - numaflow.numaproj.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - numaplane.numaproj.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps
  - serviceaccounts
  verbs:
  - '*'
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: numaplane
  name: numaplane-leader-election-rolebinding
  namespace: numaplane-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: numaplane-leader-election-role
subjects:
- kind: ServiceAccount
  name: numaplane-sa
  namespace: numaplane-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: numaplane
  name: numaplane-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: numaplane-role
subjects:
- kind: ServiceAccount
  name: numaplane-sa
  namespace: numaplane-system
---
apiVersion: v1
data:
  config.yaml: |
    syncTimeIntervalMs: 30000
    autoHealEnabled: true
    includedResources: "group=apps,kind=Deployment;\
    group=,kind=ConfigMap;group=,kind=Secret;group=,kind=ServiceAccount;group=,kind=Namespace;\
    group=numaflow.numaproj.io,kind=;\
    group=numaflow.numaproj.io,kind=;\
    group=rbac.authorization.k8s.io,kind=RoleBinding;group=rbac.authorization.k8s.io,kind=Role"
kind: ConfigMap
metadata:
  name: numaplane-controller-config
  namespace: numaplane-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller-manager
    app.kubernetes.io/name: controller-manager
    app.kubernetes.io/part-of: numaplane
  name: numaplane-controller-manager
  namespace: numaplane-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/component: controller-manager
      app.kubernetes.io/name: controller-manager
      app.kubernetes.io/part-of: numaplane
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        app.kubernetes.io/component: controller-manager
        app.kubernetes.io/name: controller-manager
        app.kubernetes.io/part-of: numaplane
    spec:
      containers:
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        image: quay.io/numaproj/numaplane-controller:latest
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /etc/numaplane
          name: config-volume
      initContainers: []
      serviceAccountName: numaplane-sa
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: numaplane-controller-config
        name: config-volume
